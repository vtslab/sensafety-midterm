/*
================================================================================
  (c) 2014 Strukton Embedded Solutions

  Project/Module: Sensafety Gateway

  Description: Situation Awareness Portal driver

  Reference:

  Version Control
  	  $workfile: SapDriver.c
  	  $Revision:
  	  $Date: 02-05-2014
  	  Modtime:

================================================================================
 */

#include "App/Source/MqttBroker/MqttBroker.h"



BOOLEAN L_fisCommunication = FALSE;
BOOLEAN G_fScenarioReceived = FALSE;

void MQTT_thread(void *P_stMQTT_threadPar)
{
	/* Cast pointer to the right type */
	struct MQTT_threadData *L_pMQTTsettings = (struct MQTT_threadData*) P_stMQTT_threadPar;

	/* Set MQTT Client ID */
	INT8U L_clientID[12] = "ilpClient_";
	strcat( ( (char *) &L_clientID) , (char *) &L_pMQTTsettings->clientID );

	/* Get MQTT Broker Address */
	INT8U L_address[100];
	strcpy( ( (char *) &L_address) , (char *) &L_pMQTTsettings->address );

	/* Get Thread ID */
	INT8U L_threadID;
	strcat( ( (char *) &L_threadID) , (char *) &L_pMQTTsettings->threadID );

	INT8U L_rc = SUCCESS;
	INT8U L_driverNumber = 0;

	/* MQTT initialization values */
	MQTTClient client;
	MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;

	MQTT_init();

	MQTTClient_create(&client, (char * ) &L_address, (char *) &L_clientID,
			MQTTCLIENT_PERSISTENCE_NONE, NULL);
	conn_opts.keepAliveInterval = 20;
	conn_opts.cleansession = 1;

	/* Set MQTT Callback functions = threads */
	MQTTClient_setCallbacks(client, NULL, MQTT_thread_connlost, MQTT_thread_msgarrvd, MQTT_thread_delivered);

	/* Try to connect with MQTT broker */
	while(TRUE)
	{
		L_rc = MQTT_setupConnection(&client , &conn_opts , &L_threadID);
		if (!L_rc) // Not succes..
		{
			printf("Thread[%d]:MQTT: Not alive\n", L_threadID );
		} else // If success..
		{
			L_fisCommunication = TRUE;
			printf("Thread[%d]:MQTT: Alive\n", L_threadID );
			MQTT_subscribeTopics( &client , &L_threadID );
		}

		while(L_fisCommunication)
		{
			while(TRUE == G_fScenarioReceived)
			{
				/* Wait until lock on scenario struct */
				while(0 != pthread_mutex_trylock(&G_stScenario.threadLock));

				if (TRUE == G_stScenario.newValue)
				{
					L_driverNumber = G_stScenario.driver;
					while(0 != pthread_mutex_trylock(&G_stLedDriver[L_driverNumber].threadLock));

					/* exchange values */
					G_stLedDriver[L_driverNumber].value = G_stScenario.driverValue;
					G_stLedDriver[L_driverNumber].newValue = TRUE;

					printf("MQTT: Message received. Driver %d with value %d\n", (L_driverNumber + 1) , G_stLedDriver[L_driverNumber].value);

					/* Reset new scenario flag */
					G_stScenario.newValue = FALSE;

					/* Unlock after writing */
					pthread_mutex_unlock(&G_stLedDriver[L_driverNumber].threadLock);

					/* Reset new scenario flag */
					G_fScenarioReceived = FALSE;
				}

				/* Unlock  */
				pthread_mutex_unlock(&G_stScenario.threadLock);
			}
			/* Check if communication is alive */
			usleep(1000 * 1000);
		}
	}
}

static INT8U MQTT_setupConnection( MQTTClient *P_client , MQTTClient_connectOptions *P_conn_opts , const INT8U *P_threadID)
{
	BOOLEAN L_fIsConnection = FALSE;
	BOOLEAN L_fError = FALSE;
	INT8U L_failingCount = 0;
	INT8U L_rc = MQTTCLIENT_SUCCESS;

	while( (FALSE == L_fIsConnection) && !L_fError)
	{
		/* Set up connection with Led Driver */
		L_rc = MQTTClient_connect(*P_client, P_conn_opts);

		if (L_rc != MQTTCLIENT_SUCCESS) // if failed then..
		{
			L_failingCount++;

			if (ERROR_RETRYCOUNT <= L_failingCount) // if failed to many times..
			{
				printf("Thread[%d]: MQTT: Failed to connect with MQTT broker. Right IP?\n", *P_threadID);
				L_fError = TRUE;

				/* Close connection */
				MQTTClient_disconnect(P_client, 10000);
				MQTTClient_destroy(P_client);
			}else
			{
				printf("Thread[%d]: MQTT: Failed to connect with MQTT broker, retrying %d/%d..\n\r", *P_threadID , L_failingCount, ERROR_RETRYCOUNT);
				usleep(500 * 1000);
			}

		} else // else success
		{
			L_fIsConnection = TRUE;
		}
	}
	return(L_fIsConnection);
}

void MQTT_thread_delivered(void *context, MQTTClient_deliveryToken dt)
{
	printf("Message with token value %d delivery confirmed\n", dt);
	deliveredtoken = dt;
}

int MQTT_thread_msgarrvd(void *context, char *topicName, int topicLen, MQTTClient_message *message)
{
	/*
	 * Testing with local Mosquitto Broker. Open two terminals:
	 * terminal 1: mosquitto_sub -t ilp/1/manual
	 * Terminal 2: mosquitto_pub  -f ~/projects/MidTerm/ilp/XML\ sheets/manual.xml -t ilp/1/manual
	 */

	INT8U i;
	INT8U L_receivedTopic[strlen(topicName)];
	INT8U *L_pTopic;
	INT8U *L_pChar;
	INT8U L_topicLevelChar = '/';
	INT8U L_charBuf[100];
	INT8U L_topic [10] [20]; // 10 levels of topics and max 20 char topic name
	size_t L_size = 0;

	L_pTopic = (INT8U *) topicName;

	/* Copy topic name */
	for( i = 0 ; i < strlen(topicName) ; i++ )
	{
		L_receivedTopic[i] = *L_pTopic;
		L_pTopic++;
	}
	/* Add '\0' to make a c string */
	L_receivedTopic[strlen(topicName)] = '\0';


	/* Decomposing the topic in levels */
	/* Expectation: {ilp, n , scenario */
	i = 0;
	while( 0 < strlen( (char *) L_receivedTopic))
	{
		/* Copy most left topic name in to array */
		L_size = strcspn ( (char *) &L_receivedTopic, (char *) &L_topicLevelChar );			// Get number of char until '/' or '\0'
		strncpy ( (char *) L_topic[i] , (char *) &L_receivedTopic , L_size); 				// Copy most left topic in to array
		L_topic[i][L_size] = '\0';															// Add terminating character

		/* Delete the  most left topic name */
		L_pChar = (INT8U *) strchr ( (char *) &L_receivedTopic, L_topicLevelChar); 			// Pointer to first '/' char
		if (NULL != L_pChar) 																// If char is found..
		{
			L_pChar++; 																		// Move pointer to position next to '/'
			strcpy ( (char *) &L_charBuf , (char *) L_pChar );								// Copy after '/' into buffer
			strcpy ( (char *) &L_receivedTopic, (char *) L_charBuf);						// Copy buffer back in to message
		}else 																				// Last message
		{
			L_receivedTopic[0] = '\0';														// Clear string because everything is copied to array
		}
		i++;
	}

	/* Check if the expected topics are delivered 	*/
	/*  Expected: ilp/n/scenario */
	if (0 == strcmp ( (char *) L_topic[0] , "ilp" ))
	{
		if (0 == strcmp ( (char *) L_topic[1] , MQTT_ILP_ID ))
		{
			//			if (0 == strcmp ( (char *) L_topic[2] ,  (char *) G_stManualScenario.rootElement ))
			//			{
			//			}else
			//			{
			//				printf("MQTT: Wrong topic. Expected [%s] but get: %s\n", G_stManualScenario.rootElement , L_topic[0]);
			//			}
		}else
		{
			printf("MQTT: Wrong topic. Expected [%s] but get: %s\n", MQTT_ILP_ID , L_topic[1]);
		}
	}else
	{
		printf("MQTT: Wrong topic. Expected [ilp] but get: %s\n",L_topic[0]);
	}


	/*
	 * this initialize the library and check potential ABI mismatches
	 * between the version it was compiled for and the actual shared
	 * library used.
	 */
	LIBXML_TEST_VERSION

	xmlDocPtr receivedXML;
	xmlNodePtr root_element = NULL;

	receivedXML = xmlReadMemory(message->payload, message->payloadlen, "noname.xml", NULL, 0);

	if (NULL == receivedXML)
	{
		printf("MQTT: Received XML file is empty!\n");
	}

	/* Wait until lock on scenario struct */
	while(0 != pthread_mutex_trylock(&G_stScenario.threadLock));

	/*Get the root element node */
	root_element = xmlDocGetRootElement(receivedXML);
	strcpy( (char *) G_stScenario.ScenarioName , (char *) root_element->name );

	/* Compare if received XML file corresponds to the topic on which it is received*/
	if (0 == strcmp( (char *) L_topic[2], (char *) G_stScenario.ScenarioName))
	{

			/* get driver nr. ( "- 1" to change from 1..n tot 0..n ) */
			G_stScenario.driver = ((atoi( (char *) root_element->children->next->children->content)) - 1);

			/* Parse XML Values to scenario struct */
			G_stScenario.driverValue = atoi( (char *) root_element->children->next->next->next->children->content);

			/* Check if received driver no is within range of */
			if(( (LEDDRIVERS - 1) >= G_stScenario.driver ) && ( 0 < G_stScenario.driver ) && ( 255 >= G_stScenario.driverValue ))
			{
				/* New value arrived */
				G_stScenario.newValue = TRUE;

				/*Set global flag for handling in the main thread */
				G_fScenarioReceived = TRUE;
			}else
			{
				printf("MQTT: Error received message. Values out of range\n");
			}
	}else
	{
		printf("MQTT: Error. Topic and XML file does not match\n");
	}

	/* Unlock after writing */
	pthread_mutex_unlock(&G_stScenario.threadLock);

	/* Clean up XML file and MQTT message  */
	xmlFreeDoc(receivedXML);
	xmlCleanupParser();
	MQTTClient_freeMessage(&message);
	MQTTClient_free(&message);

	return 1;
}

/**
 * print_element_names:
 * @a_node: the initial xml node to consider.
 *
 * Prints the names of the all the xml elements
 * that are siblings or children of a given xml node.
 */
static void print_element_names(xmlNode * a_node)
{
	xmlNode *cur_node = NULL;

	for (cur_node = a_node; cur_node; cur_node = cur_node->next) {
		if (cur_node->type == XML_ELEMENT_NODE) {
			printf("node type: Element, name: %s\n", cur_node->name);
		}

		print_element_names(cur_node->children);
	}
}

void MQTT_thread_connlost(void *context, char *cause)
{
	printf("Connection lost\n");
	printf(" cause: %s\n", cause);
	L_fisCommunication = FALSE;
}

/*******************************************************************************
 * Function:		initLedDrivers
 * Parameters(s):
 * Returns:
 * Description:		This function initialize the led drivers structures with
 * 					some initial values
 * Reference:
 * Global/static variables
 * 		modified:	--
 * 		used:		--
 * Error handling:	--
 *******************************************************************************/
static void MQTT_init()
{
	INT8U i = 0;
	size_t L_size = 0;

//	/* Initializing the MQTT message queue with init values */
//	L_size = (sizeof(G_stMQTTmsgQueue) / sizeof(G_stMQTTmsgQueue[0]));
//	for(i = 0; i < L_size; i++)
//	{
//		G_stMQTTmsgQueue[i].id = i;
//		G_stMQTTmsgQueue[i].newValue = TRUE;
//		G_stMQTTmsgQueue[i].value = ((i * 1000) + 1);
//		pthread_mutex_init(&G_stMQTTmsgQueue[i].threadLock, NULL); // Initialize mutexen
//	}
}

static INT8U MQTT_subscribeTopics(MQTTClient *P_client ,const INT8U *P_threadID)
{
	INT8U L_rc = MQTTCLIENT_SUCCESS;
	char L_topic[100];
	char *L_ptrTopic;
	L_ptrTopic = &L_topic[0];
	int L_qos = QOS;

	/* Setting op topic: "ilp/1/driver/+/value" */
	strcpy(L_topic, "ilp");
	strcat(L_topic, "/");
	strcat(L_topic, MQTT_ILP_ID);
	strcat(L_topic, "/");
	strcat(L_topic, "#");

	printf( "Subscribing to topic %s\n using QoS%d\n" , L_topic , QOS );
	L_rc = MQTTClient_subscribeMany( *P_client , 1 , &L_ptrTopic , &L_qos);

	return L_rc;
}
