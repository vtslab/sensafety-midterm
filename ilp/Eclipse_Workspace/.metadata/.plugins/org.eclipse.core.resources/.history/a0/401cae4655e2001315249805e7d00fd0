/*
================================================================================
  (c) 2014 Strukton Embedded Solutions

  Project/Module: Sensafety Gateway

  Description: Situation Awareness Portal driver

  Reference:

  Version Control
  	  $workfile: SapDriver.c
  	  $Revision:
  	  $Date: 02-05-2014
  	  Modtime:

================================================================================
 */

#include "App/Source/MqttBroker/MqttBroker.h"

void MQTT_thread(void *P_stMQTT_threadPar)
{
	/* Cast pointer to the right type */
	struct MQTT_threadData *L_pMQTTsettings = (struct MQTT_threadData*) P_stMQTT_threadPar;

	/* Set MQTT Client ID */
	INT8U L_clientID[12] = "ilpClient_";
	strcat( ( (char *) &L_clientID) , (char *) &L_pMQTTsettings->clientID );

	/* Get MQTT Broker Address */
	INT8U L_address[100];
	strcpy( ( (char *) &L_address) , (char *) &L_pMQTTsettings->address );

	/* Get Thread ID */
	INT8U L_threadID;
	strcat( ( (char *) L_threadID) , (char *) &L_pMQTTsettings->threadID );

	INT8U L_rc = SUCCESS;
	int ch;
	BOOLEAN L_fisCommunication = FALSE;
	BOOLEAN L_fNewValue = FALSE;

	/* MQTT initialization values */
	MQTTClient client;
	MQTTClient_connectOptions conn_opts = MQTTClient_connectOptions_initializer;
	MQTTClient_message pubmsg = MQTTClient_message_initializer;
	MQTTClient_deliveryToken token;

	/* Initialize message queue*/
	MQTT_msgQueue.In = 0;
	MQTT_msgQueue.Out = 0;
	MQTT_msgQueue.newValue = FALSE;


	MQTTClient_create(&client, (char * ) &L_address, (char *) &L_clientID,
			MQTTCLIENT_PERSISTENCE_NONE, NULL);
	conn_opts.keepAliveInterval = 20;
	conn_opts.cleansession = 1;

	/* Set MQTT Callback functions = threads */
	MQTTClient_setCallbacks(client, NULL, MQTT_threadConnlost, MQTT_threadMsgarrvd, MQTT_threadDelivered);

	/* Try to connect with MQTT broker */
	while(TRUE)
	{
		L_rc = MQTT_setupConnection(&client , &conn_opts , &L_threadID);

		if (!L_rc) // Not succes..
		{
			printf("Thread[%d]:MQTT: Not alive\n", L_threadID );

		} else // If success..
		{
			L_fisCommunication = TRUE;
			printf("Thread[%d]:MQTT: Alive\n", L_threadID );
			printf("Subscribing to topic %s\nfor client %s using QoS%d\n\n" "Press Q<Enter> to quit\n\n", TOPIC, (char *) L_clientID , QOS );
			MQTTClient_subscribe(client, TOPIC, QOS);
		}

		while(L_fisCommunication)
		{
			do
			{

			}while(L_fNewValue);
		}
	}
}

static INT8U MQTT_setupConnection( MQTTClient *P_client , MQTTClient_connectOptions *P_conn_opts , const INT8U *P_threadID)
{
	BOOLEAN L_fIsConnection = FALSE;
	BOOLEAN L_fError = FALSE;
	INT8U L_failingCount = 0;
	INT8U L_rc = MQTTCLIENT_SUCCESS;

	while( (FALSE == L_fIsConnection) && !L_fError)
	{
		/* Set up connection with Led Driver */
		L_rc = MQTTClient_connect(*P_client, P_conn_opts);

		if (L_rc != MQTTCLIENT_SUCCESS) // if failed then..
		{
			L_failingCount++;

			if (ERROR_RETRYCOUNT <= L_failingCount) // if failed to many times..
			{
				printf("Thread[%d]: MQTT: Failed to connect with MQTT broker. Right IP?\n", *P_threadID);
				L_fError = TRUE;
				/* Close connection */
				MQTTClient_disconnect(P_client, 10000);
				MQTTClient_destroy(P_client);
			}else
			{
				printf("Thread[%d]: MQTT: Failed to connect with MQTT broker, retrying %d/%d..\n\r", *P_threadID , L_failingCount, ERROR_RETRYCOUNT);
				usleep(500 * 1000);
			}

		} else // else success
		{
			L_fIsConnection = TRUE;
		}
	}
	return(L_fIsConnection);
}

void MQTT_threadDelivered(void *context, MQTTClient_deliveryToken dt)
{
	printf("Message with token value %d delivery confirmed\n", dt);
	deliveredtoken = dt;
}
int MQTT_threadMsgarrvd(void *context, char *topicName, int topicLen, MQTTClient_message *message)
{
	INT8U i;
	INT8U *payloadptr;

	payloadptr = message->payload;

	/* Check if message is not to long for the buffer */
	if (20 > message->payloadlen)
	{

		/* Put received message in message queue */
		for(i=0; i<message->payloadlen; i++)
		{
			MQTT_msgQueue.queue[MQTT_msgQueue.In][i] = *payloadptr;
			payloadptr++;
			//putchar(*payloadptr++);
		}

		/* Final character is '\0' to make a c string */
		MQTT_msgQueue.queue[MQTT_msgQueue.In][message->payloadlen] = '\0';

		MQTT_msgQueue.In++;

	} else
	{
		printf("MQTT: Received message from MQTT broker is to large [%d]. Message ignored\n", message->payloadlen);
	}

	/* Clear message */
	MQTTClient_freeMessage(&message);
	MQTTClient_free(topicName);

	return 1;
}
void MQTT_threadConnlost(void *context, char *cause)
{
	printf("\nConnection lost\n");
	printf(" cause: %s\n", cause);
}
